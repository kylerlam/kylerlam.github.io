"use client";

import { ComponentPropsWithoutRef } from "react";
import { cn } from "@/lib/utils";
import { techStackData } from "@/data/tech";
import { Button } from "@/components/ui/button";
import { LayoutGrid, ArrowLeft } from "lucide-react";
import { useState, useRef } from "react";
import {motion, useInView} from "framer-motion"

interface MarqueeProps extends ComponentPropsWithoutRef<"div"> {
  className?: string;
  reverse?: boolean;
  pauseOnHover?: boolean;
  vertical?: boolean;
  repeat?: number;
}

export function Marquee({ className, reverse = false, pauseOnHover = false, vertical = false, repeat = 4, ...props }: MarqueeProps) {
    const ref = useRef(null)
    const isInView = useInView(ref, {once:true, margin:"-100px"})
    const [showAll, setShowAll] = useState(false)

    const containerVariants = {
        hidden:{opacity:0,y:20},
        visible:{opacity:1,y:0},
        transition:{
            duration:0.8
        }
    }

  // Take out all logos
  const logos = techStackData.flatMap((category) =>
    category.subcategories.flatMap((sub) =>
      sub.technologies.map((tech) => ({
        src: tech.logo,
        alt: tech.name,
      })),
    ),
  );

  return (
    <motion.div
        ref={ref}
        variants={containerVariants}
        initial="hidden"
        animate={isInView ? "visible" : "hidden"}
        className="space-y-content-md"
    >
    <div className="space-y-20">
      <div 
        {...props}
        className={cn(
          "group flex overflow-hidden [--gap:3rem] [--duration:30s] gap-[var(--gap)] p-4",
          {
            "flex-row": !vertical,
            "flex-col": vertical,
          },
          className,
        )}
      >
        {Array(repeat)
          .fill(0)
          .map((_, i) => (
            <div
              key={i}
              className={cn("flex shrink-0 justify-around gap-[var(--gap)]", {
                "animate-marquee flex-row": !vertical,
                "animate-marquee-vertical flex-col": vertical,
                "group-hover:[animation-play-state:paused]": pauseOnHover,
                "[animation-direction:reverse]": reverse,
              })}
            >
              {logos.map((logo, idx) => (
                <div key={`${logo.alt}-${i}-${idx}`} className="flex items-center justify-center w-[50px] h-[50px] rounded-full">
                  <img src={logo.src} alt={logo.alt} width={64} height={64} />
                </div>
              ))}
            </div>
          ))}
      </div>
      <div className="flex justify-center">
        <Button
          variant="outline"
          size="icon"
            onClick={() => setShowAll(true)}
          className="h-10 w-10"
          title="Show all technologies"
        >
          <LayoutGrid className="h-4 w-4" />
        </Button>
      </div>
    </div>
    </motion.div>
  );
}
